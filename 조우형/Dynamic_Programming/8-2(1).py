'''
다이나믹 프로그래밍 실전문제 2. 1로 만들기

정수 X가 주어졌을 때, 연산 4개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는
횟수의 최솟값을 출력하시오.
1. X가 5로 나누어떨어지면, 5로 나눈다.
2. X가 3으로 나누어떨어지면, 3으로 나눈다.
3. X가 2로 나누어떨어지면, 2로 나눈다.
4. X에서 1을 뺀다.

이 문제는 입력 값에 연산을 반복하여 1을 만드는 최소 연산 수를 구하는 문제입니다.
제한 조건은 입력 값 X의 범위가 1부터 30,000 사이입니다.

여러 경우가 나타나므로 DP로 풀어야한다고 생각했습니다.
'''
x = int(input())

# 1부터 30,000 사이의 X 값이 되기 위한 최소 연산 횟수를 저장할 리스트
table = [0] * 30001

# 바텀업 방식으로 2부터 입력 값에 도달하기까지 반복
# 1이 되는 최소 경우의 수는 0이기 때문에 배제하고 2부터 시작
for i in range(2, x+1):
    '''
    i가 조건 1,2,3으로 처리가 안되는 경우 4번 조건으로 1을 더해주므로
    이전 횟수에서 1을 더한 횟수로 d[i]를 설정한다.
    '''
    d[i] = d[i-1] + 1

    '''
    i가 1,2,3 조건으로 처리가 되는 경우, 이전에 저장한 값과
    i에 2를 곱하기 전 값에 도달하기 위한 횟수를 비교하여서
    최소 값으로 갱신해준다.
    '''
    if i%2 == 0:
        d[i] = min(d[i], d[i//2]+1)
    if i%3 == 0:
        d[i] = min(d[i], d[i//3]+1)
    if i%5 == 0:
        d[i] = min(d[i], d[i//5]+1)

